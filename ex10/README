yochze
201517018
Yochay Ettun

Readme for the tenth exercise in Intro2CS.

==================
=  Description:  =
==================
This exercise goal was to develop a OOP program that given a list of words and
a path, it efficiently search for those words in every file and directory
in the path (recursively) and returns results accordingly.

This excercise required an implementation of several class modules and unders-
standing of OOP principals.

In addition, I implemented a sorting algorithm (Quicksort) and a string
matching algorithm (Binary Search). The decision to use these algorithms 
spefically was due the request of building an efficient (complexity-wise) 
solution to those problems.

=====================
=  Question  2.5.D  =
=====================
The assignment was to create a searching algorithm on a list in a complexity
no bigger the n.
To achieve this assignment I implemented a quicksort algorithm to sort a copy
of the list (a new parameter in the class).
Then, when having the sorted list, I could use the binary search algorithm
to easily and fastly lookup a word/term in my duplicated sorted list.


=====================
=  Question  2.6.D  =
=====================
In the encounter implementation I initialized a new list in the object
which is "encountered_words".

Then, in the encounter function, I use the __contain__ function to determine
if the input word is in the sorted_list and not already in encountered_words.
which means its complexity is: O(logn*logn) = O(logn^2) = O(logn).
If the word pass condition, it is appended to the initialized encountered_words
list, and return True.
Otherwise, it returns False.

=====================
=  Question  2.7.B  =
=====================
This function simply check the size of the encountered_words list and compare
it with the original dictionary size.
If they're equal, return True.
Otherwise return False.

As len() == O(1) in complexity measures then
The complexity of this function is O(1 + 1) = O(2) = O(1).

=====================
=  Question  2.8.B  =
=====================
This function simply assigns the empty ist to the object's _encountered_words 
attribute.
So it's O(1) (Assignment is constant).

=============================
=  List of submitted files: =
=============================

README              This file
PathScanner.py      Implementation of the path traversing and scanning.
WordExtractor.py    Efficient way of extracting words from files.
WordTracker.py      Searching and comparing strings (words) in lists
